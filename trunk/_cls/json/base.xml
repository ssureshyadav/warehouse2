<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="20">
<Class name="json.base">
<Description>
Базовый класс для сервисов
Улучшение: количество узнавать из первой записи
!Но в таблице должен быть битмап индексы</Description>
<Abstract>1</Abstract>
<Super>%CSP.Page</Super>
<TimeCreated>62951,54623.284303</TimeCreated>

<Parameter name="CONTENTTYPE">
<Default>application/json</Default>
</Parameter>

<Parameter name="CHARSET">
<Description>
текущая система на windows-1251, а данные принимаются js (utf-8)</Description>
<Default>utf-8</Default>
</Parameter>

<Parameter name="TABLENAME">
<Description>
Имя таблицы из которого берем данные
!Но в таблице должен быть хоть один битмап индекс - чтобы быстро считать Count(*)</Description>
<Type>%String</Type>
<Default>your.tablename</Default>
</Parameter>

<Parameter name="ROWS">
<Description>
Размер порции данных по умолчанию</Description>
<Default>100</Default>
</Parameter>

<Method name="OnPage">
<Description>
Вывод на страницу </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  m rq=%request.Data 
  d ..sessionFree(.rq)
  s oper=$G(rq("oper",1)) 
  Q:oper="get" ..w1(.rq)
  Q ..w(.rq)
]]></Implementation>
</Method>

<Method name="w">
<Description><![CDATA[
Вывод первой или указанной страницы
<var>rq</var> %request.Data]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&rq:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

 k %qp s %qp=0 s where = ..where( .rq, .%qp)
 s order = ..order(.rq)
 s tablename = ..#TABLENAME
 s sql="SELECT ID, count(*) as records FROM "_ tablename _ where _ order 
 #;w "sql: ",sql, ! zw qp
 s %rs = ##class(%ResultSet).%New("%DynamicQuery:SQL")
 s sc = %rs.Prepare(sql)
 
 #; особенность Cache 5.2
 s cmd=" s %sc=%rs.Execute(" 
 for i=1:1:%qp s:i>1 cmd=cmd_"," s cmd=cmd_"%qp("_i_")"
 s cmd=cmd_")"
 xecute cmd
 k %sc
 
 
 s rows=+$g(rq("rows",1)) s:rows<1 rows=..#ROWS ;размер порции данных
 
 #;номер запрашиваемой страницы, по умолчанию первой 
 s page=+$g(rq("page",1)) s:page<1 page=1 
 
 #;начальные значения
 s records = 0, pages=0, firstrow=1, lastrow=1, isfirst=1
 
 w "{""rows"":["
 for { Q:'%rs.Next() 
   
   s i=%ROWCOUNT
   if i = 1 {  ;только на первой строке производим основные расчеты
        s records = $g( %rs.Data("records") )
        s pages=records\rows ;количество порций
        s:records#rows>0 pages=pages+1 ;непоместившиеся строки на след порцию
        s:page>pages page=pages ;нельзя вывести порцию больше чем есть данных

        #;диапазон выводимых строк
        s lastRow=rows*page ;последняя запись которую надо вывести с записи
        s firstRow=lastRow-rows ; начиная с записи
   } 
     
   if i<=firstRow continue ;Не дошли до первой записи порции
   if i>lastRow quit  ;прошли последнюю запись порции
   w:'isfirst "," s:isfirst isfirst=0 ;запятая перед каждым объектом кроме первого
   d ..w1( $g(%rs.Data("ID")) ) ;вывод объекта по идентификатору 
   
 } k %rs, sql
 w "], ""page"":",page,",""total"":",pages,",""records"":",records, "}"
 
 Q 1
]]></Implementation>
</Method>

<Method name="where">
<Description><![CDATA[
вернет where c учетом параметров запроса
<var>rq</var> - %request.Data
должен вернуть корректную часть where ]]></Description>
<Abstract>1</Abstract>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&rq:%String="",*qp:%String=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 /*
 if $g(rq("_search",1))'="true" Q "" 
 s where=" WHERE 1=1 " k qp
 Q where
 */
 Q ""
]]></Implementation>
</Method>

<Method name="order">
<Description>
должен вернуть корректную часть order 
Проверяем запрос на наличие параметров sidx и sord
Проверяем чтобы sidx был указан в списке синонимов</Description>
<Abstract>1</Abstract>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&rq:%String=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    /*
    Q:'$d(rq("sidx",1)) "" ;сортировка не задана
    s sidx=$g(rq("sidx",1))
    s sord=$g(rq("sord",1),"desc") 
    s:((sord'="asc") && (sord'="desc")) sord="desc"
    Q " ORDER BY "_sidx_" "_sord
   */
    Q ""
]]></Implementation>
</Method>

<Method name="w1">
<Description>
Любая логика вывода объекта в формат json</Description>
<Abstract>1</Abstract>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 w "{""id"":""",id,""""
 w "}"
 Q 1
]]></Implementation>
</Method>

<Method name="sessionFree">
<Description><![CDATA[
Освобождаем блокировку сессии
в версиях Cache старше 5.2
$$SaveSession^%SYS.cspServer2(%session) && %session.Unlock()
$$SaveSession^%SYS.cspServer2(%session) - обновляет таймаут сессии]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec><![CDATA[&rq:%String=""]]></FormalSpec>
<Implementation><![CDATA[%session.Unlock()
]]></Implementation>
</Method>
</Class>
</Export>
