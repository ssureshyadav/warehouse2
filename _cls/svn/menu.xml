<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="20">
<Class name="svn.menu">
<Description>
Описание меню для панели инструментов студио
И обработчики основных событий плагина</Description>
<IncludeCode>svn</IncludeCode>
<Super>%Studio.Extension.Base</Super>
<TimeCreated>62299,44713.013433</TimeCreated>

<XData name="Menu">
<Data><![CDATA[
<MenuBase>
<Menu Name="%svn" Type="0">
<MenuItem Name="topLog"/>
<MenuItem Name="topBrowser"/>
<MenuItem Separator="true"/>
<MenuItem Name="topAdd" Save="100"/>
<MenuItem Name="topUpdate"/>
<MenuItem Name="topUpdateRev"/>
<MenuItem Name="topCommit"/>
<MenuItem Separator="true"/>
<MenuItem Name="topCheck"/>
<MenuItem Name="topRevert"/>
<MenuItem Name="topResolve"/>
<MenuItem Name="topCopy"/>
<MenuItem Name="topSwitch"/>
<MenuItem Separator="true"/>
<MenuItem Name="topIUpdate"/>
<MenuItem Name="topICheckout"/>
<MenuItem Name="topIE"/>
<MenuItem Separator="true"/>
<MenuItem Name="topConfig"/>
</Menu>
<Menu Name="%svnContext" Type="1">
<MenuItem Name="subLog" Save="000"/>
<MenuItem Separator="true"/>
<MenuItem Name="subLock"/>
<MenuItem Name="subUnLock"/>
<MenuItem Separator="true"/>
<MenuItem Name="subUpdate" Save="000"/>
<MenuItem Name="subCommit" Save="100"/>
<MenuItem Name="subResolve"/>
</Menu>
</MenuBase>
]]></Data>
</XData>

<Method name="OnBeforeLoad">
<Description>
Перед загрузкой элемента импортируем с диска</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 
 s msg("D")=1
 s sc=##class(operation).Import(InternalName,.msg)
 q sc
]]></Implementation>
</Method>

<Method name="OnBeforeTimestamp">
<Description>
Перед снятием штампа времени импортируем с диска</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<Implementation><![CDATA[ Do ..OnBeforeLoad(InternalName)
]]></Implementation>
</Method>

<Method name="OnAfterSave">
<Description>
После сохранения в базе выгружаем на диск</Description>
<FormalSpec>InternalName:%String,Object:%RegisteredObject=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  s msg("D")=1 Q ##class(operation).Export(InternalName,.msg)
]]></Implementation>
</Method>

<Method name="OnAfterCompile">
<Description>
После компиляции выгружаем на диск</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 q ..OnAfterSave(InternalName)
 Q $$$OK
]]></Implementation>
</Method>

<Method name="GetStatus">
<Description>
Получить текущее состояние </Description>
<FormalSpec><![CDATA[InternalName:%String,&IsInSourceControl:%Boolean,&Editable:%Boolean,&IsCheckedOut:%Boolean,&UserCheckedOut:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set Editable=1,IsCheckedOut=1,UserCheckedOut=""
 Set filename=..ExternalName(InternalName)
 Set IsInSourceControl=(filename'=""&&(##class(%File).Exists(filename)))
 If filename="" Quit $$$OK
 #; If the file does not exist then it must be a new item so it is editable.
 If '##class(%File).Exists(filename) Set IsCheckedOut=0 Quit $$$OK
 If ##class(%File).ReadOnly(filename) Set Editable=0,IsCheckedOut=0
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="IsInSourceControl">
<Description>
Проверить, есть ли элемент в рабочей директории </Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 s filename=##class(operation).GetFileName(InternalName)
 q ##class(%File).Exists(filename)
]]></Implementation>
</Method>

<Method name="ExternalName">
<Description>
Получить имя файла для элемента</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 //i $d($$$gSVN)'=11 w !,"Subversion: Invalid configuration, run SVN:Subversion/Configuration." Quit ""
 q ##class(operation).GetFileName(InternalName)
]]></Implementation>
</Method>

<Method name="OnMenuItem">
<Description>
Обработчик нажатий на меню</Description>
<FormalSpec><![CDATA[MenuName:%String,InternalName:%String,SelectedText:%String,&Enabled:%Boolean,&DisplayName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 #; вернет наименование без расширения
 #define removeEXT(%1) ($p(%1,".",1,$l(%1,".")-1))
 s menu=$piece(MenuName,","),name=$piece(MenuName,",",2)
 #; если не наше меню
 If $e(menu,1,$l($$$svn))'=$$$svn Q $$$OK
 
 
 i menu=$$$svn {
  s DisplayName=$CASE(name
  ,"topAdd":"Добавить новые (в рабочую копию)..." 
  ,"topLog":"Показать журнал изменений" 
  ,"topBrowser":"Просмотр хранилища" 
  ,"topUpdate":"1. Update working copy"
  ,"topUpdateRev":"1.1. Update working copy (to revision)..."
  ,"topCommit":"3. Commit changes to repository..." 
  ,"topCheck":"Check for modifications"
  ,"topIE":"Экспорт..."
  ,"topConfig":"Настройки плагина..."
  ,"topRevert":"Revert (undo local changes)..."
  ,"topSwitch":"Switch..."
  ,"topResolve":"Resolve..."
  ,"topCopy":"Copy (brach/tag)..."
  ,"topIUpdate":"Обновление после UPDATE"
  ,"topICheckout":"Обновление после CHECKOUT"
  ,:"SVN")
  
 } elseif menu=$$$svnContext {
  s DisplayName=$CASE(name
  ,"subUpdate":"1. Update '"_$$$removeEXT(InternalName)_"' in working copy"
  ,"subCommit":"2. Commit '"_$$$removeEXT(InternalName)_"' to repository"
  ,"subLog":"Show Log"
  ,"subLock":"Lock..."
  ,"subUnLock":"UnLock..."
  ,"subResolve":"Resolved"
  ,:name)
  
 }
 
 /*
 
 Set sc=..GetStatus(InternalName,.isinsourcecontrol,.editable,.ischeckedout)
 Set isinsourcecontrol=+$get(isinsourcecontrol),editable=+$get(editable),ischeckedout=+$get(ischeckedout)
 If $$$ISERR(sc) Quit sc
 
 
 
 If name="%CheckOut" {
  If ischeckedout||('isinsourcecontrol) Set Enabled=0
 } ElseIf name="%CheckIn" {
  If 'isinsourcecontrol||('ischeckedout) Set Enabled=0
 } ElseIf name="%UndoCheckout" {
  If 'isinsourcecontrol||('ischeckedout) Set Enabled=0
 } ElseIf name="%GetLatest" {
  If ischeckedout||('isinsourcecontrol) Set Enabled=0
 } ElseIf name="%AddToSourceControl" {
  If isinsourcecontrol||(InternalName="") Set Enabled=0
 }
 */
 
 
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetDefaultCspApp">
<Description>
Определение директории основного csp-приложения</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 s ver=$system.Version.GetMajor()
 if ver > 5 {
  $$$GENERATE("  Q $system.CSP.GetDefaultApp($zu(5))") 
 } else {
  $$$GENERATE("  Q $$getDefaultApp^%SYS.cspServer2($zu(5))") 
 }
 Q $$$OK
]]></Implementation>
</Method>

<Method name="UserAction">
<Description>
Обработчик пользовательских команд</Description>
<FormalSpec><![CDATA[Type:%Integer,Name:%String,InternalName:%String,SelectedText:%String,&Action:%String,&Target:%String,&Msg:%String,&Reload:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 
 #define SVNCMD(%1) $zu(147,$$$gSVN(1)_"TortoiseProc.exe")_" /command:"_(%1)
 
 s Action=0 ;никакого действия по умолчанию
 
 if Type=1,Name=2 { ; удаление из базы данных и рабочей копии
  /*
  w "SVN: Удаление '"_filename_"' from working copy..."
  s sc=##class(%File).Delete(filename)
  w $s($$$ISOK(sc):"ok.",1:"failed!"),!
  s Action=3,Target=$$$SVNCMD("remove")_" /path:"""_..ExternalName(InternalName)_""""
  */
  q $$$OK
 }
 
  
 if $$$svn_",topConfig"=Name {
  s Action=2, Target=..GetDefaultCspApp()_"/svn.config.cls" Q $$$OK
 }
  
 if $$$svn_",topIE"=Name {
  s Action=2, Target=..GetDefaultCspApp()_"/svn.export.cls" Q $$$OK
 }
 
 if Name=($$$svn_",topAdd"){
  s Action=3, Target=$$$SVNCMD("add")_" /path:"""_$$$gSVN_"""" Q $$$OK
 }
 
 if Name=($$$svn_",topLog") {
  s Action=3, Target=$$$SVNCMD("log")_" /path:"""_$$$gSVN_"""" Q $$$OK
 }
 
 if Name=$$$svn_",topBrowser" {
  s Action=3, Target=$$$SVNCMD("repobrowser")_" /path:"""_$$$gSVN_"""" Q $$$OK
 }
  

 #; определение имени файла 
 if $e(InternalName)="/" {
  s filename=$system.CSP.GetFileName(InternalName) ; имя файла содержит / подозреваем csp файл
 } else {
  s filename=..ExternalName(InternalName) ;иначе простое преобразование 
 }


 if Name=($$$svnContext_",subLog") {
  s Action=3, Target=$$$SVNCMD("log")_" /path:"""_filename_""""
 }
 elseif Name=($$$svnContext_",subCommit") {
  s Action=3, Target=$$$SVNCMD("commit")_" /path:"""_filename_""""
 }
 elseif Name=($$$svnContext_",subLock") {
  s Action=3, Target=$$$SVNCMD("lock")_" /path:"""_filename_""""
 }
 elseif Name=($$$svnContext_",subUnLock") {
  s Action=3, Target=$$$SVNCMD("unlock")_" /path:"""_filename_""""
 }
 elseif Name=($$$svnContext_",subResolve") {
  s Action=3, Target=$$$SVNCMD("resolve")_" /path:"""_filename_""""
 }
 
 #; команды основного меню
 elseif Name=$$$svn_",topUpdate" {
  s Action=3, Target=$$$SVNCMD("update")_" /path:"""_$$$gSVN_""""
 }
 elseif Name=$$$svn_",topUpdateRev" {
  s Action=3
  s Target=$$$SVNCMD("update")_" /rev /path:"""_$$$gSVN_""""
 }
 elseif Name=$$$svn_",topCommit" {
  s msg("D")=1
  d ##class(Utils).svnExportPrj(.msg)
  s Action=3, Target=$$$SVNCMD("commit")_" /path:"""_$$$gSVN_""""
 }
 elseif Name=$$$svn_",topCheck" {
  s Action=3, Target=$$$SVNCMD("repostatus")_" /path:"""_$$$gSVN_""""
 }
 elseif Name=$$$svn_",topRevert" {
  s Action=3, Target=$$$SVNCMD("revert")_" /path:"""_$$$gSVN_""""
 }
 elseif Name=$$$svn_",topResolve" {
  s Action=3, Target=$$$SVNCMD("resolve")_" /path:"""_$$$gSVN_""""
 }
 elseif Name=$$$svn_",topSwitch" {
  s Action=3, Target=$$$SVNCMD("switch")_" /path:"""_$$$gSVN_""""
 }
 elseif Name=$$$svn_",topCopy" {
  s Action=3, Target=$$$SVNCMD("copy")_" /path:"""_$$$gSVN_""""
 }
 elseif Name=$$$svn_",topICheckout" {
  s Action=1, Target="(CHECKOUT IMPORT)"_$c(13,10)_"This is an initial import after checkout! Do you want to compile all items after import?"
 }
 elseif Name=$$$svn_",topIUpdate" {
  s Action=1, Target="(UPDATE IMPORT)"_$c(13,10)_"This is an import after update! Database items will be synchronized with working copy. Do you want to compile all items after import?"
 }
 
 Q $$$OK
]]></Implementation>
</Method>

<Method name="AfterUserAction">
<Description><![CDATA[
This is called after the <method>UserAction</method> and after any template is run or dialog is displayed.
For list of input arguments see <method>UserAction</method>
In the case of the dialog the button pushed by the user is passed in Answer:<ul>
<li>0 - No</li>
<li>1 - Yes</li>
<li>2 - Cancel</li></ul>
For the dialog that contains a textbox field the text of this field is passed in 'Msg' argument.
In the case of a template if the template was closed from the 'x' button then Answer=2 to indicate
the user attempted to cancel the operation. Otherwise if the template closed normally by getting
to the end Answer=1.
For the cases where Studio did not perform any interaction this method is not called.
The default implementation is to call the standard source control tags as Studio did in Cache 5.0.
If the <var>Reload</var> argument is set to true by this method then the current document will be reloaded in Studio]]></Description>
<FormalSpec><![CDATA[Type:%Integer,Name:%String,InternalName:%String,Answer:%Integer,Msg:%String="",&Reload:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 if Name=$$$svn_",topICheckout" {
  ; checkout import
  s msg("D")=1
  if Answer<2 d ##class(Utils).CheckoutImport(Answer=1,.msg)
  else  $$$svnLog(msg,"SVN: (CHECKOUT IMPORT) Canceled by operator.")
 } elseif Name=$$$svn_",topIUpdate" {
  ; update import
  s msg("D")=1
  if Answer<2 d ##class(Utils).UpdateImport(Answer=1,.msg)
  else  $$$svnLog(msg,"SVN: (UPDATE IMPORT) Canceled by operator.")
 }
 
 s Reload=0
 q $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
