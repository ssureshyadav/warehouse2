<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="20">
<Class name="json.GoodsRights">
<Description>
Права контрагента на товары определенной группы
По умолчанию разрешен доступ ко всем товарам - скорее таблица запретов
Назначение - ограничивать экспорт справочника товаров</Description>
<IncludeCode>csp</IncludeCode>
<Super>json.service2</Super>
<TimeCreated>62464,47974.92532</TimeCreated>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	m args=%request.Data
	#; модуль редактирования в ячейке не умеет отправлять postData
	#; поэтому обновляем контрагента любым способом (например при загрузке товара)
	if $d(args("kontr")) s %session.Data("kontr")=$g(args("kontr",1))
	s oper=$g(args("oper",1))
	Q:oper="add" $$$OK
	Q:oper="edit" $$$OK
	Q:oper="del" $$$OK
	Q:oper="ban" ..Ban(.args)
	d ..wOut(.args)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="wOut">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&args:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 s page=$g(args("page",1),1) ;какую страницу данных
 s rows=+$g(args("rows",1),100) ;по сколько записей на страницу
 s sql="Select Count(ID) as total From Goods.GoodsGroup"
 s where=" WHERE 1=1 ",qp=0
 
 d ..BuildWhere(.args,.where,.qp)

 s total=..GetTotal(sql_where,.qp)  ;всего записей с такими параметрами будет ?
	
 #; проверяем корретность номера страницы
 s pages=total\rows ;целых страниц
 s:total#rows>0 pages=pages+1 ;учтем остаток
 s:page<0 page=1 s:page>pages page=pages
 
 #; ограничения порции данных
 s max=page*rows, min=max-rows
 #;w !,"max: ",max
 #;w !,"min: ",min
 
 #;только теперь интересуемся сортировкой
 s order=..GetOrder(.args)
 
 s sql="Select ID From Goods.GoodsGroup "_where_order
 
 s rs=##class(%ResultSet).%New("%DynamicQuery:SQL")
 d rs.Prepare(sql)
 #; этот тип запроса только 16 параметров
 #; но используется только 2 - группа и, возможно, наименование
 d rs.Execute($g(qp(1)),$g(qp(2)))
 
 s count=0,records=0
 
 w "{""rows"":["
 
 #define qt(%str) $tr(..QuoteJS(%str),"'","""")
 s first=1
 while rs.Next() {
	
  s count=count+1 ;номер текущей строки
  if count<min continue   ;пропускаем
  if count>max Q  ;прекращаем
  #; собственно вывод
  s records=records+1 ;считаем количество выведенных записей
  w:'first "," s:first first=0
  k id s id=$g(rs.Data("ID"))
  d ..wJson(id,.args) 
 
	}
	d rs.Close(),rs.%Close() k rs
	
 w "],""page"":""",page,""",""records"":""",total,""",""total"":""",pages,"""}"
 Q ""
]]></Implementation>
</Method>

<Method name="BuildWhere">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&args:%String,&where:%String,&qp:%String]]></FormalSpec>
<Implementation><![CDATA[
	#; обязательно группа
	s group=$g(args("group",1)), where=where_" And Groups = ? ", qp($i(qp))=group
	
	s kontr=$g(args("kontr",1)), kontr=$zstrip(kontr,"<>W") ;обязательный параметр
	if kontr="" {
		s where=where_" And ID =-1 " ;невыполнимое условие или нарушение структуры
	}
	
	if $d(args("_search")) { //в режиме поиска
		if $d(args("name")) {
			s where=where_" AND Goods->FullName Like ? "
			s name=$g(args("name",1)),  qp($i(qp))="%"_$tr(name,"%")_"%"
			
		}	
	}
]]></Implementation>
</Method>

<Method name="GetOrder">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&args:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s order=""
	if $d(args("sidx")){ //задана сортировка
	 #;сортировка возможна по единственному полю - наименование
		s sord=$g(args("sord",1)) //без проверки
		s order=" ORDER BY Goods->FullName "_sord
	}	
	Q order
]]></Implementation>
</Method>

<Method name="GetTotal">
<Description>
Подсчет количества</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[sql:%String,&qp:%String]]></FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	s total=0
	s rs=##class(%ResultSet).%New("%DynamicQuery:SQL")	
	d rs.Prepare(sql)
	d rs.Execute($g(qp(1)),$g(qp(2)))
	while rs.Next() {
		s total=+$g(rs.Data("total"))
	}
	d rs.Close(),rs.%Close() k rs
	Q total
]]></Implementation>
</Method>

<Method name="wJson">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[id:%String,&args=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  s kontr=$g(args("kontr",1))
  w "{""id"":",$$$qt(id)
  s (name,kban)="" 
  &sql(Select Goods->FullName, Goods.Goods_kbanned(Goods,:kontr) 
  									Into :name, :kban 
  									From Goods.GoodsGroup 
  									Where ID=:id
  )
  w ",""name"":",$$$qt(name)
  w ",""kban"":",$$$qt(kban)
  w "}"
]]></Implementation>
</Method>

<Method name="Ban">
<Description>
Редактирование ячейки запрет</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&args:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	s gg=$g(args("gg",1)), kontr=$g(args("kontr",1)), unban=$g(args("unban",1))
	s good=""
	&sql(Select goods Into :good From Goods.GoodsGroup Where ID=:gg)
	if unban {
			d ##class(Goods.Goods).kbanDel(good,kontr)
	} else {
		 d ##class(Goods.Goods).kbanAdd(good,kontr)
	}
	w "true"
	
 Q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^json.GoodsRightsD</DataLocation>
<DefaultData>GoodsRightsDefaultData</DefaultData>
<IdLocation>^json.GoodsRightsD</IdLocation>
<IndexLocation>^json.GoodsRightsI</IndexLocation>
<StreamLocation>^json.GoodsRightsS</StreamLocation>
<Data name="GoodsRightsDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Goods</Value>
</Value>
<Value name="3">
<Value>Kontr</Value>
</Value>
<Value name="4">
<Value>Rights</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
